"""This module parses metrics for files generated by the BCLConvert tool using the dragen hardware."""
import csv
import logging
from pathlib import Path
from typing import Dict
from cg.store.models import SequencingStatistics
from cg.apps.sequencing_metrics_parser.utils.bclconvert import BclConvertSampleMetrics

LOG = logging.getLogger(__name__)


def parse_bclconvert_demux_stats_file(demux_stats_path: Path) -> Dict[int, dict]:
    """Parse the BCLconvert demultiplexing stats file."""
    LOG.info(f"Parsing BCLConvert demultiplexing stats file {demux_stats_path}")
    parsed_stats = read_bclconvert_metric_file_to_dict()


def read_bclconvert_metric_file_to_dict(bcl_convert_metrics_file_path: Path) -> Dict[int, dict]:
    """Read the BCLconvert demultiplexing stats file."""
    LOG.info(f"Parsing BCLConvert demultiplexing stats file {bcl_convert_metrics_file_path}")
    parsed_stats = {}
    with open(bcl_convert_metrics_file_path, mode="r") as stats_file:
        stats_reader = csv.DictReader(stats_file)
        for row in stats_reader:
            lane = int(row["Lane"])
            sample_id = row["SampleID"]
            parsed_stats[lane] = parsed_stats.get(lane, {})
            parsed_stats[lane][sample_id] = row
            parsed_stats
    return parsed_stats
