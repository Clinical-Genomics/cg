"""This module parses metrics for files generated by the BCLConvert tool using the dragen hardware."""
import csv
import logging
from pathlib import Path
from typing import Dict
from cg.store.models import SequencingStatistics
from cg.apps.sequencing_metrics_parser.utils.bclconvert import BclConvertMetrics

LOG = logging.getLogger(__name__)


def parse_bcl_convert_metrics_file(
    bcl_convert_metrics_file_path: Path, sample_sheet_path: Path, quality_metrics_path: Path
) -> BclConvertMetrics:
    """Parse the BCLconvert demultiplexing stats file into the BCLconvertMetrics model."""
    LOG.info(f"Parsing BCLConvert demultiplexing stats file {bcl_convert_metrics_file_path}")
    # Read demux metrics
    read_metrics = read_metric_file_to_dict()
    # Read Quality Metrics
    quality_metrics = read_metrics_file_to_dict()
    # Read Sample sheet
    sample_sheet = read_metrics_file_to_dict()

    for lane in read_metrics:
        for sample_id in read_metrics[lane]:
            read_metrics[lane][sample_id]["Lane"] = lane
            read_metrics[lane][sample_id]["SampleID"] = sample_id


def read_metric_file_to_dict(
    metric_file_path: Path,
) -> Dict[int, dict]:
    """Read the BCLconvert demultiplexing stats file."""
    LOG.info(f"Parsing BCLConvert demultiplexing stats file {metric_file_path}")
    read_metrics = {}
    with open(metric_file_path, mode="r") as stats_file:
        stats_reader = csv.DictReader(stats_file)
        for row in stats_reader:
            lane = int(row["Lane"])
            sample_id = row["SampleID"]
            read_metrics[lane] = read_metrics.get(lane, {})
            read_metrics[lane][sample_id] = row
        return read_metrics
