"""This module contains utility functions for parsing the metrics files generated by the BCLConvert tool."""

from pydantic import BaseModel
from typing import List


class BclConvertSampleMetrics(BaseModel):
    """Gather metric from the BCL convert for a sample"""

    sample_internal_id: List[str]
    flow_cell_name: List[str]
    lane: int
    reads: int = 0
    perfect_reads: int = 0
    one_mismatch_reads: int = 0
    pass_filter_q30: int = 0
    mean_quality_score: float = 0.00
    r1_sample_bases: int = 0
    r2_sample_bases: int = 0
    read_length: int = 0

    def _calculate_perfect_index_reads_pct(self) -> float:
        """calculates the percentage of perfect index reads"""
        return round(self.perfect_reads / self.reads * 100, 2) if self.reads else 0

    def _calculate_q30_bases_pct(self) -> float:
        """calculates the percentage of bases with a sequencing quality score of 30 or over"""
        return (
            round(
                self.pass_filter_q30 / (self.r1_sample_bases + self.r2_sample_bases) * 100,
                2,
            )
            if self.r1_sample_bases + self.r2_sample_bases
            else 0
        )

    def _calculate_yield(self) -> float:
        """calculates the amount of data produced in MB"""
        total_reads = self._calculate_read_counts()
        return round(total_reads * self.read_length / 1000000, 0)

    def _calculate_read_counts(self) -> int:
        """calculates the number of reads from the number of clusters"""
        return self.reads * 2
