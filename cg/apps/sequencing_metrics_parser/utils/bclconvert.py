"""This module contains utility functions for parsing the metrics files generated by the BCLConvert tool."""

from pydantic import BaseModel
from typing import List


class BaseModel:
    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)


class BclConvertMetrics(BaseModel):
    """Gather metric from the BCL convert for a sample"""

    def __init__(
        self,
        sample_internal_id: str,
        flow_cell_name: str,
        lane: int,
        read_pairs: int,
        perfect_index_reads: int,
        perfect_index_reads_percent,
        one_mismatch_reads: int,
        mean_quality_score: float,
        yield_bases: float,
        yield_q30: float,
        q30_bases_percent: float,
    ):
        self.sample_internal_id = sample_internal_id
        self.flow_cell_name = flow_cell_name
        self.lane = lane
        self.read_pairs = reads_pairs
        self.perfect_index_reads = perfect_index_reads
        self.perfect_index_reads_percent = perfect_index_reads_percent
        self.one_mismatch_reads = one_mismatch_reads
        self.mean_quality_score = mean_quality_score
        self.yield_bases = yield_bases
        self.yield_q30 = yield_q30
        self.q30_bases_percent = q30_bases_percent

    def _calculate_total_read_counts(self) -> int:
        """calculates the number of reads from reported number of read pairs"""
        return self.read_pairs * 2
