"""sync-with-db

Revision ID: 526e8250a192
Revises: 367ed257e4ee
Create Date: 2023-06-15 14:36:57.819815

"""

import sqlalchemy as sa
from alembic import op
from cg.store.models import SampleLaneSequencingMetrics
from sqlalchemy import types
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = "526e8250a192"
down_revision = "367ed257e4ee"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("invoice", "comment", existing_type=types.Text, nullable=True)
    op.alter_column(
        "application",
        "prep_category",
        existing_type=mysql.ENUM("cov", "mic", "rml", "tgs", "wes", "wgs", "wts"),
        nullable=False,
    )
    op.alter_column(
        "family",
        "priority",
        existing_type=mysql.ENUM("research", "standard", "priority", "express", "clinical_trials"),
        nullable=False,
    )

    op.alter_column("invoice", "customer_id", existing_type=mysql.INTEGER(), nullable=False)

    # In the db, the foreign key invoice -> customer does not exist, actually. So below would drop the index in the db
    # and add a foreign key matching the python model. Foreign keys are indexed by default.
    op.drop_index("customer_invoice_pk", table_name="invoice")
    op.create_foreign_key(None, "invoice", "customer", ["customer_id"], ["id"])
    op.create_foreign_key(None, "pool", "invoice", ["invoice_id"], ["id"])

    op.alter_column(
        "sample",
        "priority",
        existing_type=mysql.ENUM("research", "standard", "priority", "express", "clinical_trials"),
        nullable=False,
    )

    op.create_foreign_key(None, "sample", "invoice", ["invoice_id"], ["id"])

    op.drop_column("sample", "beaconized_at")
    ####
    sa.delete(SampleLaneSequencingMetrics).where(SampleLaneSequencingMetrics.flowcell is None)

    op.alter_column(
        "sample_lane_sequencing_metrics",
        "flow_cell_name",
        existing_type=mysql.VARCHAR(charset="latin1", collation="latin1_swedish_ci", length=32),
        nullable=False,
    )
    op.alter_column(
        "sample_lane_sequencing_metrics",
        "sample_internal_id",
        existing_type=mysql.VARCHAR(charset="latin1", collation="latin1_swedish_ci", length=32),
        nullable=False,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "sample_lane_sequencing_metrics",
        "sample_internal_id",
        existing_type=mysql.VARCHAR(charset="latin1", collation="latin1_swedish_ci", length=32),
        nullable=True,
    )
    op.alter_column(
        "sample_lane_sequencing_metrics",
        "flow_cell_name",
        existing_type=mysql.VARCHAR(charset="latin1", collation="latin1_swedish_ci", length=32),
        nullable=True,
    )
    op.add_column("sample", sa.Column("beaconized_at", mysql.TEXT(), nullable=True))
    op.drop_constraint(None, "sample", type_="foreignkey")
    op.alter_column(
        "sample",
        "priority",
        existing_type=mysql.ENUM("research", "standard", "priority", "express", "clinical_trials"),
        nullable=True,
    )
    op.drop_constraint(None, "pool", type_="foreignkey")
    op.drop_constraint(None, "invoice", type_="foreignkey")
    op.create_index("customer_invoice_pk", "invoice", ["customer_id"], unique=False)
    op.alter_column("invoice", "customer_id", existing_type=mysql.INTEGER(), nullable=True)
    op.alter_column(
        "family",
        "priority",
        existing_type=mysql.ENUM("research", "standard", "priority", "express", "clinical_trials"),
        nullable=True,
    )
    op.alter_column(
        "application",
        "prep_category",
        existing_type=mysql.ENUM("cov", "mic", "rml", "tgs", "wes", "wgs", "wts"),
        nullable=True,
    )
    op.alter_column("invoice", "comment", existing_type=types.Text, nullable=False)
    # ### end Alembic commands ###
