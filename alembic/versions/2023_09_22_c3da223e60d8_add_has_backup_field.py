"""add has_backup field

Revision ID: c3da223e60d8
Revises: d0aa961845b9
Create Date: 2023-09-22 11:10:14.616339

"""

from enum import StrEnum

import sqlalchemy as sa
from sqlalchemy import Column, types
from sqlalchemy.orm import DeclarativeBase, sessionmaker

from alembic import op

# revision identifiers, used by Alembic.
revision = "c3da223e60d8"
down_revision = "d0aa961845b9"
branch_labels = None
depends_on = None

Session = sessionmaker()


class Model(DeclarativeBase):
    pass


class Flowcell(Model):
    __tablename__ = "flowcell"
    id = Column(types.Integer, primary_key=True)
    sequencer_type = Column(types.Enum("hiseqga", "hiseqx", "novaseq", "novaseqx"))
    sequenced_at = Column(types.DateTime)
    has_backup = Column(types.Boolean, nullable=False, default=False)


class Sequencers(StrEnum):
    """Sequencer instruments."""

    ALL: str = "all"
    HISEQX: str = "hiseqx"
    HISEQGA: str = "hiseqga"
    NOVASEQ: str = "novaseq"
    NOVASEQX: str = "novaseqx"
    OTHER: str = "other"


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)

    op.add_column(
        table_name="flowcell", column=sa.Column("has_backup", sa.Boolean(), nullable=False)
    )

    # Update has_backup based on sequencer_type
    for flowcell in session.query(Flowcell).all():
        if flowcell.sequencer_type == Sequencers.NOVASEQX:
            flowcell.has_backup = False
        else:
            flowcell.has_backup = True
        session.add(flowcell)
    session.commit()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column(table_name="flowcell", column_name="has_backup")
    # ### end Alembic commands ###
